AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9

  Sam for API

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
Parameters:
  RetentionInDays:
    Type: Number
    Default: 180

Resources:
  CommandFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: CommandFunction
      Description: Command Function
      Tracing: Active
      Policies:
        - Statement:
            - Sid: AllowXray
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Sid: DynamoWrite
              Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: '*'
      Events:
        AddUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: POST
        UpdateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: PUT
        DeleteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: DELETE
        # groups
        AddGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups
            Method: POST
        UpdateGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: PUT
        DeleteGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: DELETE

        # users in group
        AddGroupMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups/{group_id}
            Method: PUT
        DeleteGroupMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups/{group_id}
            Method: delete
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/command
      DockerTag: python3.9-v1

  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: QueryFunction
      Description: 'Query Function'
      Tracing: Active
      Policies:
        - Statement:
            - Sid: AllowXray
              Effect: Allow
              Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
              Resource:
                - '*'
            - Sid: DynamoRead
              Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource:
                - '*'
      Events:
        GetUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: GET
        SearchUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: GET
        #group
        GetGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: GET
        SearchGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups
            Method: GET
        SearchUserGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups
            Method: GET
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/query
      DockerTag: python3.9-v1

  # KmsKey:
  #   Type: AWS::KMS::Key
  #   Properties:
  #     Description: CMK for encrypting and decrypting
  #     KeyPolicy:
  #       Version: '2012-10-17'
  #       Id: key-default-1
  #       Statement:
  #         - Sid: Enable IAM User Permissions
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action: kms:*
  #           Resource: '*'

  ApiLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: 'api-log-group-2'
      RetentionInDays: !Ref RetentionInDays

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: dev
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","requestTime":"$context.requestTime", "routeKey":"$context.routeKey", "status":"$context.status", "error": "$context.authorizer.error"}'
      # Auth:
      #   DefaultAuthorizer: LambdaRequestAuthorizer
      #   Authorizers:
      #     LambdaRequestAuthorizer:
      #       FunctionArn: !GetAtt AuthFunction.Arn
      #       FunctionInvokeRole: !GetAtt AuthFunctionRole.Arn
      #       Identity:
      #         Headers:
      #           - Authorization
      #       AuthorizerPayloadFormatVersion: 2.0
      #       EnableSimpleResponses: true

  # AuthFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     PackageType: Image
  #     FunctionName: AuthFunction
  #     Policies: AmazonAPIGatewayInvokeFullAccess
  #   Metadata:
  #     Dockerfile: Dockerfile
  #     DockerContext: ./src/authorizer
  #     DockerTag: python3.9-v1

  # permissions
  # ApiPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     FunctionName:
  #       'Fn::GetAtt':
  #         - AuthFunction
  #         - Arn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: apigateway.amazonaws.com
  #     SourceArn:
  #       !Join [
  #         '',
  #         [
  #           'arn:aws:execute-api:',
  #           { 'Ref': 'AWS::Region' },
  #           ':',
  #           { 'Ref': 'AWS::AccountId' },
  #           ':',
  #           !Ref HttpApi,
  #           '/*/*/*',
  #         ],
  #       ]
# Outputs:
# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
# HelloWorldApi:
#   Description: 'API Gateway endpoint URL for Prod stage for Hello World function'
#   Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/'
# HelloWorldFunction:
#   Description: 'Hello World Lambda Function ARN'
#   Value: !GetAtt HelloWorldFunction.Arn
# HelloWorldFunctionIamRole:
#   Description: 'Implicit IAM Role created for Hello World function'
#   Value: !GetAtt HelloWorldFunctionRole.Arn
