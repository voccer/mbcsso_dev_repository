AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9

  Process SNS to SQS

Parameters:
  Region:
    Type: String
    Default: ap-northeast-1
  AWSEnv:
    Type: String
    Default: AWS

Resources:
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: queue-sso

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: topic-sso
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt SQSQueue.Arn

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: 'Allow SNS publish to SQS'
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt SQSQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
      Queues:
        - Ref: SQSQueue

  ProcessSQSFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: ProcessSQSFunction
      Policies:
        - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_sqs
      DockerTag: python3.9-v1

  WaitSQSConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: WaitSQSConsumer
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_wait
      DockerTag: python3.9-v1

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Event rule is waiting'
      EventPattern:
        source:
          - 'demo.event'
        detail-type:
          - transaction
        detail:
          result:
            - 'approved'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt WaitSQSConsumerFunction.Arn
          Id: 'WaitingConsumer'
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: 'WaitSQSConsumerFunction'
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn:
        Fn::GetAtt:
          - 'EventRule'
          - 'Arn'
