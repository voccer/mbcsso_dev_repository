AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >

  Sam for sso

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    Environment:
      Variables:
        REGION: !Ref AWS::Region
        ACCOUNT_ID: !Ref AWS::AccountId
        ENV: !Ref Env
        SYSTEM_NAME: !Ref SystemName

Parameters:
  SystemName:
    Type: String
    Default: mbcsso
  Env:
    Type: String
    AllowedValues:
      - dev
      - prod
      - stg
    Default: dev
  LatestDockerTag:
    Type: String
    Default: latest
  GitHubOwner:
    Description: GitHub username owning the repo
    Type: String
    Default: ''
  GitHubRepo:
    Description: GitHub repo name
    Type: String
    Default: ''
  GitHubBranch:
    Description: GitHub repo branch name. It defaults to master if not specified.
    Type: String
    Default: main
  ConnectionId:
    Description: Connection ID for codestar
    Type: String
    Default: ''
  BuildSpecFilePath:
    Description: Relative BuildSpec file path for build stage. For more information, see https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
    Type: String
    Default: 'buildspec.yaml'

  RetentionInDays:
    Type: Number
    Default: 180
  ReadCapacityUnits:
    Type: Number
    Default: 5
  WriteCapacityUnits:
    Type: Number
    Default: 5
  BatchSize:
    Type: Number
    Default: 1

Conditions:
  HasConnectionId: !Not [!Equals [!Ref ConnectionId, '']]
  NotHaveConnectionId: !Equals [!Ref ConnectionId, '']
Rules:
  ValidateGitHub:
    Assertions:
      - Assert: !Not [!Equals [!Ref GitHubOwner, '']]
        AssertDescription: 'GitHubOwner must be specified when SourceCodeProvider is GitHub'
      - Assert: !Not [!Equals [!Ref GitHubRepo, '']]
        AssertDescription: 'GitHubRepo must be specified when SourceCodeProvider is GitHub'
      - Assert: !Not [!Equals [!Ref GitHubBranch, '']]
        AssertDescription: 'GitHubBranch must be specified when SourceCodeProvider is GitHub'

Resources:
  ApiLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub ${SystemName}_${Env}_api_log_group
      RetentionInDays: !Ref RetentionInDays
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: Env
          Value: !Ref Env

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Env
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","requestTime":"$context.requestTime", "routeKey":"$context.routeKey", "status":"$context.status", "error": "$context.authorizer.error"}'
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt AuthFunction.Arn
            Identity:
              Headers:
                - Authorization
            AuthorizerPayloadFormatVersion: 2.0
            EnableSimpleResponses: true
            FunctionPayloadType: REQUEST
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env

  # permissions
  ApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt AuthFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/authorizers/*'

  # authorizer function
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_AuthFunction
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_Config
        - KMSDecryptPolicy:
            KeyId: '*'
        - KMSEncryptPolicy:
            KeyId: '*'
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env

    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/authorizer/
      DockerTag: !Ref LatestDockerTag

  #kms
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: CMK for encrypting and decrypting
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'

  KmsKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub alias/${SystemName}_${Env}_user_kms_key
      TargetKeyId: !Ref KmsKey

  # function for command api
  CommandFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_CommandFunction
      Description: !Sub 'command function for ${SystemName}_${Env}'
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${SystemName}_${Env}_*_*_user_commands
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_Config
        - AWSXRayDaemonWriteAccess
        - KMSEncryptPolicy:
            KeyId: '*'
      Events:
        AddUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: POST
        UpdateUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: PUT
        DeleteUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: DELETE
        # groups
        AddGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups
            Method: POST
        UpdateGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: PUT
        DeleteGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: DELETE

        # users in group
        AddGroupMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups/{group_id}
            Method: PUT
        DeleteGroupMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups/{group_id}
            Method: delete
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KmsKey
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/command
      DockerTag: !Ref LatestDockerTag
  # function for query api
  QueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_QueryFunction
      Description: !Sub 'query function for ${SystemName}_${Env}'
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_*_*_users
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_Config
        - AWSXRayDaemonWriteAccess
      Events:
        GetUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}
            Method: GET
        SearchUser:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users
            Method: GET
        #group
        GetGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups/{group_id}
            Method: GET
        SearchGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /groups
            Method: GET
        SearchUserGroup:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /users/{user_id}/groups
            Method: GET
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/query
      DockerTag: !Ref LatestDockerTag

  ProcessStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_ProcessStreamFunction
      Policies:
        - DynamoDBStreamReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_*_*_user_commands
            StreamName: '*' # arn of stream
        - DynamoDBCrudPolicy:
            TableName: !Sub ${SystemName}_${Env}_*_*_users
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_Config
        - SNSCrudPolicy:
            TopicName: !GetAtt SNSTopic.TopicName
      Environment:
        Variables:
          TopicName: !GetAtt SNSTopic.TopicName
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_stream
      DockerTag: !Ref LatestDockerTag

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${SystemName}_${Env}_queue

      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${SystemName}_${Env}_topic
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt SQSQueue.Arn
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: 'Allow SNS publish to SQS'
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt SQSQueue.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic
      Queues:
        - !Ref SQSQueue

  ProcessSQSFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_ProcessSQSFunction
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${SystemName}_${Env}_*_*_users
        - DynamoDBReadPolicy:
            TableName: !Sub ${SystemName}_${Env}_Config
        - KMSDecryptPolicy:
            KeyId: '*'
        - KMSEncryptPolicy:
            KeyId: '*'
        - EventBridgePutEventsPolicy:
            EventBusName: '*'

      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: !Ref BatchSize
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KmsKey
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_sqs
      DockerTag: !Ref LatestDockerTag

  # waiting functions for eventbridge
  WaitSQSConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${SystemName}_${Env}_WaitSQSConsumer
      Tags:
        Name: !Ref SystemName
        Env: !Ref Env
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./src/process_wait
      DockerTag: !Ref LatestDockerTag

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Event rule is waiting'
      EventPattern:
        source:
          - 'demo.event'
        detail-type:
          - transaction
        detail:
          result:
            - 'approved'
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt WaitSQSConsumerFunction.Arn
          Id: 'WaitingConsumer'

  # permission to invoke function from event
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WaitSQSConsumerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
  ## dynamodb config table
  ConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${SystemName}_${Env}_Config
      AttributeDefinitions:
        - AttributeName: system_id
          AttributeType: S
        - AttributeName: tenant_id
          AttributeType: S
      KeySchema:
        - AttributeName: system_id
          KeyType: HASH
        - AttributeName: tenant_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  ## Antifacts for codepipeline
  Artifacts:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${SystemName}_${Env}_pipeline'
      ArtifactStore:
        Location: !Ref Artifacts
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !If
                  - HasConnectionId
                  - !Sub 'arn:${AWS::Partition}:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/${ConnectionId}'
                  - !Ref GitHubConnection
                FullRepositoryId: !Sub '${GitHubOwner}/${GitHubRepo}'
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: 'CODE_ZIP'
              OutputArtifacts:
                - Name: SourceArtifact

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Used by CodePipeline. Created by CloudFormation ${AWS::StackId}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        ## allow CodePipeline to access s3
        - PolicyName: s3-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${Artifacts}/*'
        - PolicyName: codebuild-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource:
                  - !GetAtt BuildProject.Arn
        - PolicyName: codestar-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codestar-connections:UseConnection'
                Resource:
                  - !Ref GitHubConnection
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env
  GitHubConnection:
    Condition: NotHaveConnectionId
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: !Sub '${SystemName}-${Env}-github-connection2'
      ProviderType: GitHub
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${SystemName}_${Env}_build_project'
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Ref BuildSpecFilePath
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/standard:5.0'
        Type: 'LINUX_CONTAINER'
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: REGION
            Value: !Ref AWS::Region
          - Name: SYSTEM_NAME
            Value: !Ref SystemName
          - Name: ENV
            Value: !Ref Env
          - Name: LATEST_DOCKER_TAG
            Value: !Ref LatestDockerTag
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env

  CodeBuildPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${SystemName}_${Env}_codebuild_access_policy
      Roles:
        - !Ref BuildProjectRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
          - Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Artifacts}/*
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${Artifacts}
          - Action:
              - lambda:*
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*'

  BuildProjectRole:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub 'Used in CodeBuild project. Created by CloudFormation ${AWS::StackId}'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: '2012-10-17'
      Path: /service-role/
      Tags:
        - Key: SystemName
          Value: !Ref SystemName
        - Key: env
          Value: !Ref Env
Outputs:
  #   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  #   # Find out more about other implicit resources you can reference within SAM
  #   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HttpApi:
    Description: 'API Gateway endpoint URL for MBC'
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}'
