# Buildspec Reference Doc: https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html

version: 0.2

env:
  shell: bash
phases:
  install:
    commands:
      - echo "[+] Scanning for security vulnerability within dependencies"
  pre_build:
    commands:
      - echo "[+] Running pre-build tasks"
      - ACCOUNT_ID=465316005105
      - SYSTEM_NAME=mbcsso
      - ENV=dev
      - LATEST_TAG="latest"
      - ECR_URI="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      - FUNCTION_NAMES="${SYSTEM_NAME}_${ENV}_CommandFunction ${SYSTEM_NAME}_${ENV}_ProcessSQSFunction ${SYSTEM_NAME}_${ENV}_ProcessStreamFunction ${SYSTEM_NAME}_${ENV}_AuthFunction ${SYSTEM_NAME}_${ENV}_QueryFunction ${SYSTEM_NAME}_${ENV}_WaitSQSConsumer"
      - FUNCTION_SRC_DIRS="command process_sqs process_stream authorizer query process_wait"

      - aws --version

      # login to ECR
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}

      - IMAGE_URIS=""
      - REPO_NAMES=""
      - for FUNCTION_NAME in $(echo $FUNCTION_NAMES | sed "s/ / /g"); do
        IMAGE_URI=$(aws lambda get-function --function-name $FUNCTION_NAME | jq -r '.Code.ImageUri');
        IMAGE_URIS+="${IMAGE_URI} ";

        REPO_NAME=$(echo ${IMAGE_URI} | cut -d "/" -f 2)/$(echo ${IMAGE_URI} | cut -d "/" -f 3);
        REPO_NAME=$(echo ${REPO_NAME} | cut -d ":" -f 1);#remove tag
        REPO_NAMES+="${REPO_NAME} ";
        done
      - echo "[+] Image URIs $IMAGE_URIS"
      - echo "[+] Repo Names $REPO_NAMES"
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo "[+] building ...."
      - i=1
      - for REPO_NAME in $(echo $REPO_NAMES | sed "s/ / /g"); do
        docker build -t $ECR_URI/$REPO_NAME:$LATEST_TAG $(echo $FUNCTION_SRC_DIRS | cut -d " " -f $i);
        docker tag $ECR_URI/$REPO_NAME:$LATEST_TAG $ECR_URI/$REPO_NAME:$TAG_NAME;
        i=$((i+1));
        done

  post_build:
    commands:
      - echo "SAM packaging completed on `date`"
      - i=1
      - for REPO_NAME in $(echo $REPO_NAMES | sed "s/ / /g"); do
        docker push $ECR_URI/$REPO_NAME:$IMAGE_TAG;
        docker push $ECR_URI/$REPO_NAME:$LATEST_TAG;
        echo "Pushed $ECR_URI/$REPO_NAME:$IMAGE_TAG";
        echo "Pushed $ECR_URI/$REPO_NAME:$LATEST_TAG";
        aws lambda update-function-code --function-name $(echo $FUNCTION_NAMES | cut -d " " -f $i) --image-uri $ECR_URI/$REPO_NAME:$LATEST_TAG;
        i=$((i+1));
        done
# artifacts:
#   files:
#     - packaged.yaml
#   discard-paths: yes

# cache:
#   paths:
#     - '/root/.cache/pip'
