openapi: 3.0.0
info:
  description: 'SSO Service manages account and group.'
  version: 'v1'
  title: 'SSO Service API'
servers:
  - url: https://jt437t1uhc.execute-api.ap-northeast-1.amazonaws.com/dev/
    description: development endpoint
tags:
  # - name: config
  #   description: config management
  - name: user
    description: user and group management

paths:
  # /sso:
  #   post:
  #     tags:
  #       - config
  #     summary: create sso
  #     description: create sso
  #     operationId: 'add_sso'
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/sso_create_request'

  #     responses:
  #       '200':
  #         description: 'Successful operation'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/sso_create_response'
  #       '400':
  #         description: 'Invalid input'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error_response'
  # /sso/{sso_id}:
  #   put:
  #     tags:
  #       - config
  #     summary: update sso
  #     description: update sso
  #     operationId: 'update_sso'
  #     parameters:
  #       - in: path
  #         name: sso_id
  #         description: sso id
  #         required: true
  #         schema:
  #           type: string
  #           example: 'abc#123'
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/sso_update_request'
  #     responses:
  #       '200':
  #         description: 'Successful operation'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/sso_update_response'
  #       '400':
  #         description: 'Invalid input'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error_response'

  #   delete:
  #     tags:
  #       - config
  #     summary: delete sso
  #     description: delete sso
  #     operationId: 'delete_sso'
  #     parameters:
  #       - in: path
  #         name: sso_id
  #         description: sso id
  #         required: true
  #         schema:
  #           type: string
  #           example: 'abc#123'
  #     responses:
  #       '200':
  #         description: 'Successful operation'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/sso_delete_response'
  #       '400':
  #         description: 'Invalid input'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/error_response'

  ###### USER ######
  /users:
    get:
      tags:
        - user
      summary: search user by parameters
      description: search user by parameters
      operationId: 'search_user'

      parameters:
        - in: query
          name: username
          description: username
          schema:
            type: string
            example: 'seller123'

        - in: query
          name: email
          description: email
          schema:
            type: string
            example: 'seller123@gmail.com'
        - in: query
          name: first_name
          description: first_name
          schema:
            type: string
            example: 'John'

        - in: query
          name: last_name
          description: last_name
          schema:
            type: string
            example: 'Doe'

        - in: query
          name: first_name_contains
          description: first_name_contains
          schema:
            type: string
            example: 'Joh'

        - in: query
          name: last_name_contains
          description: last_name_contains
          schema:
            type: string
            example: 'Do'

      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_search_response'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
    post:
      tags:
        - user
      summary: create user
      description: create user
      operationId: 'create_user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_create_request'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_create_response'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

  /users/{user_id}:
    put:
      tags:
        - user
      summary: update user
      description: update user.
      operationId: 'update_user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_update_request'
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            example: 'seller123'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_update_response'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

    delete:
      tags:
        - user
      summary: delete user
      description: delete user
      operationId: 'delete_user'
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            example: 'seller123'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_delete_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

    get:
      tags:
        - user
      summary: get user
      description: get user
      operationId: 'get_user'
      parameters:
        - in: path
          name: user_id
          description: user id
          required: true
          schema:
            type: string
            example: 'seller123'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_get_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
  /groups:
    get:
      tags:
        - user
      summary: search group
      description: search group
      operationId: 'search_group'
      parameters:
        - in: query
          name: groupname
          description: groupname
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_search_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

    post:
      tags:
        - user
      summary: create group
      description: create group
      operationId: 'create_group'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group_create_request'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_create_response'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

  /groups/{group_id}:
    put:
      tags:
        - user
      summary: update group
      description: update group
      operationId: 'update_group'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group_update_request'
      parameters:
        - in: path
          name: group_id
          description: group id
          required: true
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_update_response'
        '400':
          description: 'Invalid input'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
    delete:
      tags:
        - user
      summary: delete group
      description: delete group
      operationId: 'delete_group'
      parameters:
        - in: path
          name: group_id
          description: group id
          required: true
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_delete_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
    get:
      tags:
        - user
      summary: get group
      description: get group
      operationId: 'get_group'
      parameters:
        - in: path
          name: 'group_id'
          description: 'group id'
          required: true
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_get_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
  /users/{user_id}/groups/{group_id}:
    put:
      tags:
        - user
      summary: add group member
      description: add group member
      operationId: 'add_group_member'
      parameters:
        - in: path
          name: 'user_id'
          description: 'user id'
          required: true
          schema:
            type: string
            example: 'seller123'
        - in: path
          name: 'group_id'
          description: 'group id'
          required: true
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_add_member_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

    delete:
      tags:
        - user
      summary: delete group member
      description: delete group member
      operationId: 'delete_group_member'
      parameters:
        - in: path
          name: 'user_id'
          description: 'delete group member'
          required: true
          schema:
            type: string
            example: 'seller123'
        - in: path
          name: 'group_id'
          description: 'group id'
          required: true
          schema:
            type: string
            example: 'group1'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group_delete_member_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []
  /users/{user_id}/groups:
    get:
      tags:
        - user
      summary: get group of user
      description: get group of user
      operationId: 'search_user_group'
      parameters:
        - in: path
          name: 'user_id'
          description: 'user id'
          required: true
          schema:
            type: string
            example: 'seller123'
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user_group_search_response'
        '400':
          description: 'Invalid parameter error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_response'
      security:
        - apiKeyAuth: []

components:
  securitySchemes:
    apiKeyAuth:
      type: 'apiKey'
      name: 'Authorization'
      in: 'header'

  schemas:
    sso_create_request:
      type: object
      required:
        - system_id
        - tenant_id
      properties:
        system_id:
          type: string
          description: system id
          example: 'system1'
        tenant_id:
          type: string
          description: tenant id
          example: 'tenant1'
        client_id:
          type: string
          description: client id
          example: 'client1'
        client_secret:
          type: string
          description: client secret
          example: 'ajafdferdfasfadf'
        admin:
          type: string
          description: admin
          example: 'admin1'
        password:
          type: string
          description: password
          example: '112-12312-213123-123'
        keycloak_url:
          type: string
          description: keycloak url
          example: 'http://localhost:8080/auth'
        keycloak_realm:
          type: string
          description: keycloak realm
          example: 'master'
    sso_create_response:
      type: object
      properties:
        access_token:
          type: string
          description: access token
        refresh_token:
          type: string
          description: refresh token
        expires_in:
          type: integer
          description: expires in
        token_type:
          type: string
          description: token type
        scope:
          type: string
          description: scope
    sso_update_request:
      type: object
      properties:
        client_id:
          type: string
          description: client id
          example: 'client1'
        client_secret:
          type: string
          description: client secret
          example: 'ajafdferdfasfadf'
        admin:
          type: string
          description: admin
          example: 'admin1'
        password:
          type: string
          description: password
          example: '112-12312-213123-123'
        keycloak_url:
          type: string
          description: keycloak url
          example: 'http://localhost:8080/auth'
        keycloak_realm:
          type: string
          description: keycloak realm
          example: 'master'
    sso_update_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    sso_delete_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'

    error_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Error code'
          example: 'E_INVALID'
        message:
          type: 'string'
          description: 'Error message'
          example: 'Input invalid'
    user_create_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    user_update_request:
      type: 'object'
      properties:
        password:
          type: 'string'
          description: password
          example: '123456'
        email:
          type: 'string'
          description: email
          example: 'john@gmail.com'
        first_name:
          type: 'string'
          description: first name
          example: 'John'
        last_name:
          type: 'string'
          description: last name
          example: 'Doe'
    user_create_request:
      type: 'object'
      required:
        - 'username'
        - 'password'
      properties:
        username:
          type: 'string'
          description: username
          example: 'seller123'
        password:
          type: 'string'
          description: password
          example: '123456'
        email:
          type: 'string'
          description: email
          example: 'john@gmail.com'
        first_name:
          type: 'string'
          description: first name
          example: 'John'
        last_name:
          type: 'string'
          description: last name
          example: 'Doe'

    user_update_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    user_delete_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    user_get_response:
      type: 'object'
      required:
        - 'code'
        - 'data'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
        data:
          type: 'object'
          properties:
            username:
              type: 'string'
              description: 'User id'
              example: 'seller123'
            first_name:
              type: 'string'
              description: 'User first name'
              example: 'John'
            last_name:
              type: 'string'
              description: 'User last name'
              example: 'Doe'
            email:
              type: 'string'
              description: 'User email'
              example: 'johndoe@gmail.com'
    user_search_response:
      type: 'object'
      required:
        - 'code'
        - 'data'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: 'string'
                description: 'User id'
                example: '3o2u32onlsd33u3nlsdd9'
              first_name:
                type: 'string'
                description: 'User first name'
                example: 'John'
              last_name:
                type: 'string'
                description: 'User last name'
                example: 'Doe'
              email:
                type: 'string'
                description: 'User email'
                example: 'johndoe@gmail.com'

    group_create_request:
      type: 'object'
      required:
        - 'groupname'
      properties:
        groupname:
          type: 'string'
          description: 'Group name'
          example: 'group1'
    group_create_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    group_update_request:
      type: 'object'
      properties:
        description:
          type: 'string'
          description: 'description of group'
          example: 'this is group 1'
    group_update_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    group_delete_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    group_add_member_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    group_delete_member_response:
      type: 'object'
      required:
        - 'code'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
    group_search_response:
      type: 'object'
      required:
        - 'code'
        - 'data'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
        data:
          type: array
          items:
            type: object
            properties:
              group_id:
                type: string
                description: group_id
                example: 'group1'

    group_get_response:
      type: 'object'
      required:
        - 'code'
        - 'data'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
        data:
          type: object
          properties:
            group_id:
              type: string
              description: group_id
              example: 'group123'
    user_group_search_response:
      type: object
      required:
        - 'code'
        - 'data'
      properties:
        code:
          type: 'string'
          description: 'Success code'
          enum:
            - 'ok'
        data:
          type: array
          items:
            type: object
            properties:
              group_id:
                type: string
                description: group_id
                example: 'group123'
